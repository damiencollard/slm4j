Starschema License Manager for java (slm4j)
=========

**GOAL**
> This fork aims to introduce the ability to verify a license
> from a stream and to fix other shortcomings of the API...

---

Slm4j project aimed to provide an easy-to-use, easy-to-implement license
manager system for java projects.

Basic functionality
-------------------

The project includes a command line tool to generate private and public
keys for cryptographical signing, and a runtime class (or jar module) to
validate the generated keys.

The signed data is an ASCII armored file, which could store date or time
limitations, functionality restrictions or any user specified strings.
The embedded license file validator ensures that file is not modified by
using DSA algorythm.


Command line usage
------------------

**NOTE** The current command lines feel a bit weird and will be improved upon.

First, create the wrapper script by issuing command `sbt mksh` which creates
script `bin/slm4j.sh`.

The commandline usage can be printed with the `--help` or `-h` option.

The following command signs file `input1.txt` and writes the result to `output1.txt`.
If `test1.pub` (public key file) and `test1.pkf` (private key file) do not exist,
then these files are automatically generated.

    $ bin/slm4j.sh sign -license input1.txt -public test1.pub -private test1.pkf -sign output1.txt

After the initial key generation, the generated key files are used for futher sign actions.

    $ bin/slm4j.sh sign -license input2.txt -public test1.pub -private test1.pkf -sign output2.txt

To verify the generated keys use the "verify" action:

    $ bin/slm4j.sh verify -sign output1.txt -public test1.pub
    License is valid
    $ bin/slm4j.sh verify -sign output2.txt -public test1.pub
    License is valid

To check what happens if we modify the generated license file use our favourite editor and try it:

    $ vim output2.txt
    $ bin/slm4j.sh verify -sign output2.txt -public test1.pub
    License is not valid


Usage from java programs
------------------------

To validate a user supplied license file in your application, you must include
your public key file in the binary distribution (eg. in a resource file or in
a hardcoded static private string in your license handler class) and import
`SignatureValidator`.

To check the input license file, issue:

```java
     private static final String PUBLIC_KEY = "...";

     try {
       SignatureValidator validator = new SignatureValidator();

       if ( validator.verifyLicenseWithString( PUBLIC_KEY, fileToValidate ) )
         System.out.println("License is valid");
         System.out.println("Registred to: " + validator.getLicenseOptions().get("RegistredTo") );
       } else {
         System.out.println("License is not valid");
       }
     } catch (SlmException ex) {
       System.out.println("Can not load license information: " + ex.getMessage() );
     }
```

For more information please refer to included javadocs.

Example license file
--------------------

The following file was generated by slm4j:

    ----- BEGIN LICENSE -----
    RegistredTo=John Smith
    ExpirationDate=20090630
    Version=Full
    ----- END LICENSE -----
    ----- BEGIN SIGNATURE -----
    MCwCFCKRoTnYFdE7JJzH
    W2XQddSq9wqCR43hRQ+J
    BZV5FS+ZU5j90JAZFUA2
    WQ==
    ----- END SIGNATURE -----

Any changes in license data will cause an invalid license exception.

  * [This slm4j on GitHub](https://github.com/damiencollard/slm4j)
  * [Original slm4j on GitHub](http://github.com/starschema/slm4j/)
